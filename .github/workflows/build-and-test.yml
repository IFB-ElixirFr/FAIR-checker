# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build and test

on:
  push:
    branches: [ dev_alban, dev_thomas, master ]
  pull_request:
    branches: [ dev_alban, dev_thomas, master]
    
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    #----------------------------------------------
    #  -----  install & configure poetry  -----      
    #----------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    #----------------------------------------------
    #       load cached venv if cache exists      
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    #----------------------------------------------
    # install dependencies if cache does not exist 
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    #----------------------------------------------
    # install your root project, if required 
    #----------------------------------------------      
    - name: Install library
      run: poetry install --no-interaction
    #----------------------------------------------
    # Code quality check
    #----------------------------------------------      
    - name: Lint with flake8
      run: |
        source .venv/bin/activate
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --exclude=.venv,.git --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --exclude=.venv,.git --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    #----------------------------------------------
    #              run test suite   
    #----------------------------------------------
    - name: Run tests
      run: |
        source .venv/bin/activate
        coverage run --omit '.venv/*' -m pytest tests
        coverage report -m
        
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install poetry flake8 pytest
#        #if [ -f requirements.txt ]; then pip install -r requirements.txt; fi     
